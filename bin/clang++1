#!/bin/bash

#set -o xtrace

INPUT=$@
args=()
to_object=false
take_next=false

for var in "$@"
do
  if [ "${take_next}" = true ]; then
    args+="$var"
  fi
  if [ "${var:0:1}" = "-" ]; then
    if [ "${var:1:2}" = "c" ]; then
      to_object=true
      var+=" "
    else
      if [ "${var:1:2}" = "o" ]; then
        take_next=true
      fi
    fi
    ignore_next=true
    args+="$var"
  else
    filename="$var"
  fi
done

passes=""

# If the file was changed, run pass 1
if [ $(cat changes.json | ./jq-linux64 "has(\"$filename\")") = true ]; then
  passes+="\
    -set_labels\
    "
fi

# passes+="\
#   -taint\
#   "

# If the file contains interesting functions, run pass 3
if [ $(cat tainted_functions.json | ./jq-linux64 "has(\"$filename\")") = true ]; then
  passes+="\
    -taint_function\
    "
fi

passes+="\
  -dfsan\
  "

echo $passes

ll="tmp/ll_tmp.ll"
bc="tmp/pass_2_tmp.bc"
o="tmp/pass_2_o.o"

# Create ll files
clang++ \
  -nostdinc++\
  -I /opt/llvm/include/c++/v1/\
  -g\
  -emit-llvm\
  "$@"\
  -S\
  -o $ll

# Run optimizers
/opt/llvm/bin/opt \
  -load lib/libTaintPass.so\
  $passes\
  -dfsan-abilist=share/dfsan_abilist.txt\
  < $ll\
  > $bc

if [ "$to_object" = false ]; then
  clang++ -fsanitize=dataflow\
    -mllvm\
    -disable-llvm-optzns\
    $bc -c -o "$o"

  clang++-dfsan\
    -I json/include\
    runtime/to_json.cpp\
    "$o" "$args"
else
  clang++ -fsanitize=dataflow\
    -mllvm\
    -disable-llvm-optzns\
    $bc $args
fi